//#pragma OPENCL EXTENSION cl_khr_fp64: enable

typedef unsigned char  uint8_t;
typedef unsigned long uint64_t;

uint64_t ROL64(uint64_t data, unsigned int offset)
{
    const int _offset = offset;
    return ((offset != 0) ? ((data << _offset) ^ (data >> (64-offset))) : data);
}

__constant static const uint64_t RC[24]={0x0000000000000001,0x0000000000008082, 0x800000000000808A,
                             0x8000000080008000, 0x000000000000808B, 0x0000000080000001,
                             0x8000000080008081, 0x8000000000008009, 0x000000000000008A,
                             0x0000000000000088, 0x0000000080008009, 0x000000008000000A,
                             0x000000008000808B, 0x800000000000008B, 0x8000000000008089,
                             0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
                             0x000000000000800A, 0x800000008000000A, 0x8000000080008081,
                             0x8000000000008080, 0x0000000080000001, 0x8000000080008008};

__constant static const int r[25]= {0, 1, 62, 28, 27,
                        36, 44, 6, 55, 20, 
                        3, 10, 43, 25, 39,
                        41, 45, 15, 21, 8,
                        18, 2, 61, 56, 14};
                    
__kernel 
void KeccakSingleWorkItemSingleHash(__global uint64_t *data, __global uint64_t *out){
        
        int x = get_global_id(0);
        __local uint64_t A[25], B[25], C[5], D[5];
        
        for(int b =0; b<25;b++){
            A[b] =  data[b];
            if( b < 5)
                D[b] = (uint64_t) 0;
        }
                        
        for(int i =0; i < 24; i++){
        //printf("id: %d ", x);
        C[0] = 0;
        C[0] = C[0] ^ A[0];
        C[0] = C[0] ^ A[5];
        C[0] = C[0] ^ A[10];
        C[0] = C[0] ^ A[15];
        C[0] = C[0] ^ A[20];
        D[0] = ROL64(C[0], 1);
        //x = 1
        C[1] = 0;
        C[1] = C[1] ^ A[1];
        C[1] = C[1] ^ A[6];
        C[1] = C[1] ^ A[11];
        C[1] = C[1] ^ A[16];
        C[1] = C[1] ^ A[21];
        D[1] = ROL64(C[1], 1);
        // x = 2
        C[2] = 0;
        C[2] = C[2] ^ A[2];
        C[2] = C[2] ^ A[7];
        C[2] = C[2] ^ A[12];
        C[2] = C[2] ^ A[17];
        C[2] = C[2] ^ A[22];
        D[2] = ROL64(C[2], 1);
        // x = 3
        C[3] = 0;
        C[3] = C[3] ^ A[3];
        C[3] = C[3] ^ A[8];
        C[3] = C[3] ^ A[13];
        C[3] = C[3] ^ A[18];
        C[3] = C[3] ^ A[23];
        D[3] = ROL64(C[3], 1);
        // x = 4
        C[4] = 0;
        C[4] = C[4] ^ A[4];
        C[4] = C[4] ^ A[9];
        C[4] = C[4] ^ A[14];
        C[4] = C[4] ^ A[19];
        C[4] = C[4] ^ A[24];
        D[4] = ROL64(C[4], 1);
        
        A[0] = A[0] ^ D[1] ^ C[4];
        A[5] = A[5] ^ D[1] ^ C[4];
        A[10] = A[10] ^ D[1] ^ C[4];
        A[15] = A[15] ^ D[1] ^ C[4];
        A[20] = A[20] ^ D[1] ^ C[4];
        
        A[1] = A[1] ^ D[2] ^ C[0];
        A[6] = A[6] ^ D[2] ^ C[0];
        A[11] = A[11] ^ D[2] ^ C[0];
        A[16] = A[16] ^ D[2] ^ C[0];
        A[21] = A[21] ^ D[2] ^ C[0];
        
        A[2] = A[2] ^ D[3] ^ C[1];
        A[7] = A[7] ^ D[3] ^ C[1];
        A[12] = A[12] ^ D[3] ^ C[1];
        A[17] = A[17] ^ D[3] ^ C[1];
        A[22] = A[22] ^ D[3] ^ C[1];
        
        A[3] = A[3] ^ D[4] ^ C[2];
        A[8] = A[8] ^ D[4] ^ C[2];
        A[13] = A[13] ^ D[4] ^ C[2];
        A[18] = A[18] ^ D[4] ^ C[2];
        A[23] = A[23] ^ D[4] ^ C[2];
        
        A[4] = A[4] ^ D[0] ^ C[3];
        A[9] = A[9] ^ D[0] ^ C[3];
        A[14] = A[14] ^ D[0] ^ C[3];
        A[19] = A[19] ^ D[0] ^ C[3];
        A[24] = A[24] ^ D[0] ^ C[3];
        
        A[0] = ROL64(A[0], r[0]);
        A[5] = ROL64(A[5], r[5]);
        A[10] = ROL64(A[10], r[10]);
        A[15] = ROL64(A[15], r[15]);
        A[20] = ROL64(A[20], r[20]);
        
        A[1] = ROL64(A[1], r[1]);
        A[6] = ROL64(A[6], r[6]);
        A[11] = ROL64(A[11], r[11]);
        A[16] = ROL64(A[16], r[16]);
        A[21] = ROL64(A[21], r[21]);

        A[2] = ROL64(A[2], r[2]);
        A[7] = ROL64(A[7], r[7]);
        A[12] = ROL64(A[12], r[12]);
        A[17] = ROL64(A[17], r[17]);
        A[22] = ROL64(A[22], r[22]);
        
        A[3] = ROL64(A[3], r[3]);
        A[8] = ROL64(A[8], r[8]);
        A[13] = ROL64(A[13], r[13]);
        A[18] = ROL64(A[18], r[18]);
        A[23] = ROL64(A[23], r[23]);
        
        A[4] = ROL64(A[4], r[4]);
        A[9] = ROL64(A[9], r[9]);
        A[14] = ROL64(A[14], r[14]);
        A[19] = ROL64(A[19], r[19]);
        A[24] = ROL64(A[24], r[24]);
        
        B[0] = A[0];
        B[5] = A[5];
        B[10] = A[10];
        B[15] = A[15];
        B[20] = A[20];
        
        B[1] = A[1];
        B[6] = A[6];
        B[11] = A[11];
        B[16] = A[16];
        B[21] = A[21];
        
        B[2] = A[2];
        B[7] = A[7];
        B[12] = A[12];
        B[17] = A[17];
        B[22] = A[22];
        
        B[3] = A[3];
        B[8] = A[8];
        B[13] = A[13];
        B[18] = A[18];
        B[23] = A[23];
        
        B[4] = A[4];
        B[9] = A[9];
        B[14] = A[14];
        B[19] = A[19];
        B[24] = A[24];
        
        A[0] = B[0];
        A[16] = B[5];
        A[7] = B[10];
        A[23] = B[15];
        A[14] = B[20];
        
        A[10] = B[1];
        A[1] = B[6];
        A[17] = B[11];
        A[8] = B[16];
        A[24] = B[21];
        
        A[20] = B[2];
        A[11] = B[7];
        A[2] = B[12];
        A[18] = B[17];
        A[9] = B[22];
        
        A[5] = B[3];
        A[21] = B[8];
        A[12] = B[13];
        A[3] = B[18];
        A[19] = B[23];
        
        A[15] = B[4];
        A[6] = B[9];
        A[22] = B[14];
        A[13] = B[19];
        A[4] = B[24];
        
        C[0] = A[0] ^ ((~A[1]) & A[2]);
        C[1] = A[1] ^ ((~A[2]) & A[3]);
        C[2] = A[2] ^ ((~A[3]) & A[4]);
        C[3] = A[3] ^ ((~A[4]) & A[0]);
        C[4] = A[4] ^ ((~A[0]) & A[1]);
        A[0] = C[0];
        A[1] = C[1];
        A[2] = C[2];
        A[3] = C[3];
        A[4] = C[4];
        
        C[0] = A[5] ^ ((~A[6]) & A[7]);
        C[1] = A[6] ^ ((~A[7]) & A[8]);
        C[2] = A[7] ^ ((~A[8]) & A[9]);
        C[3] = A[8] ^ ((~A[9]) & A[5]);
        C[4] = A[9] ^ ((~A[5]) & A[6]);
        A[5] = C[0];
        A[6] = C[1];
        A[7] = C[2];
        A[8] = C[3];
        A[9] = C[4];
        
        C[0] = A[10] ^ ((~A[11]) & A[12]);
        C[1] = A[11] ^ ((~A[12]) & A[13]);
        C[2] = A[12] ^ ((~A[13]) & A[14]);
        C[3] = A[13] ^ ((~A[14]) & A[10]);
        C[4] = A[14] ^ ((~A[10]) & A[11]);
        A[10] = C[0];
        A[11] = C[1];
        A[12] = C[2];
        A[13] = C[3];
        A[14] = C[4];
        
        C[0] = A[15] ^ ((~A[16]) & A[17]);
        C[1] = A[16] ^ ((~A[17]) & A[18]);
        C[2] = A[17] ^ ((~A[18]) & A[19]);
        C[3] = A[18] ^ ((~A[19]) & A[15]);
        C[4] = A[19] ^ ((~A[15]) & A[16]);
        A[15] = C[0];
        A[16] = C[1];
        A[17] = C[2];
        A[18] = C[3];
        A[19] = C[4];
        
        C[0] = A[20] ^ ((~A[21]) & A[22]);
        C[1] = A[21] ^ ((~A[22]) & A[23]);
        C[2] = A[22] ^ ((~A[23]) & A[24]);
        C[3] = A[23] ^ ((~A[24]) & A[20]);
        C[4] = A[24] ^ ((~A[20]) & A[21]);
        A[20] = C[0];
        A[21] = C[1];
        A[22] = C[2];
        A[23] = C[3];
        A[24] = C[4];
        
        // Iota
        A[0] = A[0] ^ (RC[i]<<64);
        
        }
        for(int i=0; i < 25; i++)    
           out[i] = A[i];
}
